'''
unittest / numpy.testing
'''

import unittest
from unittest import TestCase
import numpy as np
import warnings
warnings.filterwarnings("ignore")

from digplexq.directed_q_analysis import *
from digplexq.digraph_based_complexes import *


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

A = np.array([[0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.],
       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])

DFC_dim_none_A = [[[4, 0], [0, 6], [8, 0], [0, 9], [14, 0], [1, 3], [5, 1], [1, 7], [9, 1], [1, 11], [4, 2], [2, 6], [11, 2], [2, 12], [2, 13], [4, 6], [4, 14], [6, 10], [6, 11], [14, 6], [7, 9], [7, 11], [9, 10], [11, 9], [9, 12], [9, 15], [11, 15], [12, 13], [14, 12]], [[4, 0, 6], [4, 14, 0], [14, 0, 6], [1, 7, 11], [4, 2, 6], [2, 12, 13], [4, 14, 6], [7, 11, 9], [11, 9, 15]], [[4, 14, 0, 6]]]

DFC_dim_nodes_A = [[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15]], [[4, 0], [0, 6], [8, 0], [0, 9], [14, 0], [1, 3], [5, 1], [1, 7], [9, 1], [1, 11], [4, 2], [2, 6], [11, 2], [2, 12], [2, 13], [4, 6], [4, 14], [6, 10], [6, 11], [14, 6], [7, 9], [7, 11], [9, 10], [11, 9], [9, 12], [9, 15], [11, 15], [12, 13], [14, 12]], [[4, 0, 6], [4, 14, 0], [14, 0, 6], [1, 7, 11], [4, 2, 6], [2, 12, 13], [4, 14, 6], [7, 11, 9], [11, 9, 15]], [[4, 14, 0, 6]]]

MaxSimp_A = [[[8, 0], [0, 9], [1, 3], [5, 1], [9, 1], [11, 2], [6, 10], [6, 11], [9, 10], [9, 12], [14, 12]], [[1, 7, 11], [4, 2, 6], [2, 12, 13], [7, 11, 9], [11, 9, 15]], [[4, 14, 0, 6]]]

path_complex_A_3 = [[[[0, 6]],
  [[0, 9]],
  [[1, 3]],
  [[1, 7]],
  [[1, 11]],
  [[2, 6]],
  [[2, 12]],
  [[2, 13]],
  [[4, 0]],
  [[4, 2]],
  [[4, 6]],
  [[4, 14]],
  [[5, 1]],
  [[6, 10]],
  [[6, 11]],
  [[7, 9]],
  [[7, 11]],
  [[8, 0]],
  [[9, 1]],
  [[9, 10]],
  [[9, 12]],
  [[9, 15]],
  [[11, 2]],
  [[11, 9]],
  [[11, 15]],
  [[12, 13]],
  [[14, 0]],
  [[14, 6]],
  [[14, 12]]],
 [[[0, 9, 1]],
  [[0, 6, 11]],
  [[0, 9, 12]],
  [[0, 9, 15]],
  [[1, 11, 2]],
  [[1, 7, 11]],
  [[1, 11, 15]],
  [[2, 6, 10]],
  [[2, 6, 11]],
  [[2, 12, 13]],
  [[4, 14, 0]],
  [[4, 0, 9]],
  [[4, 6, 10]],
  [[4, 6, 11]],
  [[4, 2, 13]],
  [[5, 1, 3]],
  [[5, 1, 7]],
  [[5, 1, 11]],
  [[6, 11, 2]],
  [[6, 11, 9]],
  [[6, 11, 15]],
  [[7, 9, 1]],
  [[7, 11, 2]],
  [[7, 11, 9]],
  [[7, 9, 10]],
  [[7, 9, 12]],
  [[8, 0, 6]],
  [[8, 0, 9]],
  [[9, 1, 3]],
  [[9, 1, 7]],
  [[9, 1, 11]],
  [[9, 12, 13]],
  [[11, 9, 1]],
  [[11, 2, 6]],
  [[11, 9, 10]],
  [[11, 2, 13]],
  [[11, 9, 15]],
  [[14, 0, 6]],
  [[14, 0, 9]],
  [[14, 6, 10]],
  [[14, 6, 11]],
  [[14, 12, 13]],
  [[0, 6, 10]],
  [[0, 9, 10]],
  [[1, 7, 9]],
  [[1, 11, 9]],
  [[4, 0, 6]],
  [[4, 2, 6]],
  [[4, 14, 6]],
  [[4, 2, 12]],
  [[4, 14, 12]],
  [[7, 9, 15]],
  [[7, 11, 15]],
  [[11, 2, 12]],
  [[11, 9, 12]]]]

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

B = np.array([[0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1.],
       [0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1.],
       [1., 1., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0.],
       [0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.],
       [0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.]])

DFC_dim_none_B = [[[0, 3], [7, 0], [0, 8], [0, 9], [1, 3], [7, 1], [9, 1], [11, 1], [8, 2], [4, 3], [6, 3], [7, 3], [8, 3], [3, 9], [3, 10], [3, 11], [5, 4], [11, 4], [5, 6], [7, 5], [10, 5], [5, 11], [6, 8], [6, 11], [7, 8], [8, 9], [10, 11]], [[7, 0, 3], [0, 8, 3], [0, 3, 9], [7, 0, 8], [0, 8, 9], [7, 1, 3], [6, 8, 3], [6, 3, 11], [7, 8, 3], [8, 3, 9], [3, 10, 11], [5, 11, 4], [5, 6, 11], [10, 5, 11]], [[7, 0, 8, 3], [0, 8, 3, 9]]]

DFC_dim_nodes_B = [[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11]], [[0, 3], [7, 0], [0, 8], [0, 9], [1, 3], [7, 1], [9, 1], [11, 1], [8, 2], [4, 3], [6, 3], [7, 3], [8, 3], [3, 9], [3, 10], [3, 11], [5, 4], [11, 4], [5, 6], [7, 5], [10, 5], [5, 11], [6, 8], [6, 11], [7, 8], [8, 9], [10, 11]], [[7, 0, 3], [0, 8, 3], [0, 3, 9], [7, 0, 8], [0, 8, 9], [7, 1, 3], [6, 8, 3], [6, 3, 11], [7, 8, 3], [8, 3, 9], [3, 10, 11], [5, 11, 4], [5, 6, 11], [10, 5, 11]], [[7, 0, 8, 3], [0, 8, 3, 9]]]

MaxSimp_B = [[[9, 1], [11, 1], [8, 2], [4, 3], [7, 5]],
 [[7, 1, 3],
  [6, 8, 3],
  [6, 3, 11],
  [3, 10, 11],
  [5, 11, 4],
  [5, 6, 11],
  [10, 5, 11]],
 [[7, 0, 8, 3], [0, 8, 3, 9]]]


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

C = np.array([[0., 1., 0., 1., 1., 0., 1., 0., 0., 1.],
       [0., 0., 0., 1., 0., 0., 0., 1., 0., 0.],
       [1., 1., 0., 1., 1., 0., 1., 1., 0., 0.],
       [0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 1., 1., 0.],
       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 1., 1., 0., 1., 1., 1., 0., 0., 0.]])

DFC_dim_none_C = [[[0, 1], [2, 0], [0, 3], [0, 4], [0, 6], [0, 9], [2, 1], [1, 3], [1, 7], [9, 1], [2, 3], [2, 4], [2, 6], [2, 7], [9, 2], [3, 4], [3, 5], [6, 4], [4, 7], [4, 8], [9, 4], [5, 7], [9, 5], [7, 6], [8, 6], [9, 6]], [[2, 0, 1], [0, 1, 3], [0, 9, 1], [2, 0, 3], [2, 0, 4], [2, 0, 6], [0, 3, 4], [0, 6, 4], [0, 9, 4], [0, 9, 6], [2, 1, 3], [2, 1, 7], [9, 2, 1], [2, 3, 4], [2, 6, 4], [2, 4, 7], [9, 2, 4], [2, 7, 6], [9, 2, 6], [9, 6, 4]], [[2, 0, 1, 3], [2, 0, 3, 4], [2, 0, 6, 4], [0, 9, 6, 4], [9, 2, 6, 4]]]

DFC_dim_nodes_C = [[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9]], [[0, 1], [2, 0], [0, 3], [0, 4], [0, 6], [0, 9], [2, 1], [1, 3], [1, 7], [9, 1], [2, 3], [2, 4], [2, 6], [2, 7], [9, 2], [3, 4], [3, 5], [6, 4], [4, 7], [4, 8], [9, 4], [5, 7], [9, 5], [7, 6], [8, 6], [9, 6]], [[2, 0, 1], [0, 1, 3], [0, 9, 1], [2, 0, 3], [2, 0, 4], [2, 0, 6], [0, 3, 4], [0, 6, 4], [0, 9, 4], [0, 9, 6], [2, 1, 3], [2, 1, 7], [9, 2, 1], [2, 3, 4], [2, 6, 4], [2, 4, 7], [9, 2, 4], [2, 7, 6], [9, 2, 6], [9, 6, 4]], [[2, 0, 1, 3], [2, 0, 3, 4], [2, 0, 6, 4], [0, 9, 6, 4], [9, 2, 6, 4]]]

MaxSimp_C = [[[3, 5], [4, 8], [5, 7], [9, 5], [8, 6]],
 [[0, 9, 1], [2, 1, 7], [9, 2, 1], [2, 4, 7], [2, 7, 6]],
 [[2, 0, 1, 3], [2, 0, 3, 4], [2, 0, 6, 4], [0, 9, 6, 4], [9, 2, 6, 4]]]


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

D1 = np.array([[0, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0], [0, 0, 1, 0]]) #contains a 3-clique
D2 = np.array([[0, 1, 0, 1], [0, 0, 0, 1], [1, 1, 0, 0], [0, 0, 1, 0]]) #does not contain a directed 3-clique

DFC_dim_none_D1 = [[[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [3, 2]], [[0, 1, 2], [0, 1, 3], [0, 3, 2], [1, 3, 2]], [[0, 1, 3, 2]]]
DFC_dim_nodes_D1 = [[[0], [1], [2], [3]], [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [3, 2]], [[0, 1, 2], [0, 1, 3], [0, 3, 2], [1, 3, 2]], [[0, 1, 3, 2]]]
MaxSimp_D1 = [[[0, 1, 3, 2]]]

DFC_dim_none_D2 = [[[0, 1], [2, 0], [0, 3], [2, 1], [1, 3], [3, 2]], [[2, 0, 1], [0, 1, 3]]]
DFC_dim_nodes_D2 = [[[0], [1], [2], [3]], [[0, 1], [2, 0], [0, 3], [2, 1], [1, 3], [3, 2]], [[2, 0, 1], [0, 1, 3]]]
MaxSimp_D2 = [[[3, 2]], [[2, 0, 1], [0, 1, 3]]]


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

Zero = np.array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]])

DFC_dim_none_Zero = []
DFC_dim_nodes_Zero = []
MaxSimp_Zero = []
path_complex_Zero = []


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


class TestDirectedFlagComplex(TestCase):
    
    def test_DirectedFlagComplex(self):
        self.assertEqual(DirectedFlagComplex(A, 'by_dimension_without_nodes'), DFC_dim_none_A)
        self.assertEqual(DirectedFlagComplex(A, "by_dimension_with_nodes"), DFC_dim_nodes_A)
        self.assertEqual(DirectedFlagComplex(B, "by_dimension_without_nodes"), DFC_dim_none_B)
        self.assertEqual(DirectedFlagComplex(B, "by_dimension_with_nodes"), DFC_dim_nodes_B)
        self.assertEqual(DirectedFlagComplex(C, "by_dimension_without_nodes"), DFC_dim_none_C)
        self.assertEqual(DirectedFlagComplex(C, "by_dimension_with_nodes"), DFC_dim_nodes_C)
        self.assertEqual(DirectedFlagComplex(D1, "by_dimension_without_nodes"), DFC_dim_none_D1)
        self.assertEqual(DirectedFlagComplex(D1, "by_dimension_with_nodes"), DFC_dim_nodes_D1)
        self.assertEqual(DirectedFlagComplex(D2, "by_dimension_without_nodes"), DFC_dim_none_D2)
        self.assertEqual(DirectedFlagComplex(D2, "by_dimension_with_nodes"), DFC_dim_nodes_D2)
        self.assertEqual(DirectedFlagComplex(Zero, "by_dimension_without_nodes"), DFC_dim_none_Zero)
        self.assertEqual(DirectedFlagComplex(Zero, "by_dimension_with_nodes"), DFC_dim_nodes_Zero)

    def test_MaximalSimplices(self):
        self.assertEqual(MaximalSimplices(DFC_dim_nodes_A), MaxSimp_A)
        self.assertEqual(MaximalSimplices(DFC_dim_nodes_Zero), MaxSimp_Zero)
        self.assertEqual(MaximalSimplices(DFC_dim_nodes_B), MaxSimp_B)
        self.assertEqual(MaximalSimplices(DFC_dim_nodes_C), MaxSimp_C)
        self.assertEqual(MaximalSimplices(DFC_dim_nodes_D1), MaxSimp_D1)
        self.assertEqual(MaximalSimplices(DFC_dim_nodes_D2), MaxSimp_D2)


class TestPathComplex(TestCase):
    
    def test_PathComplex(self):
        self.assertEqual(PathComplex(A, 3), path_complex_A_3)
        self.assertEqual(PathComplex(Zero, 3), path_complex_Zero)
        self.assertEqual(PathComplex(Zero, 10), path_complex_Zero)
        


if __name__ == '__main__':
    unittest.main()

    
